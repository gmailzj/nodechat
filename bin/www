#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3100');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Chatroom

var numUsers = 0;
// 房间用户名单
var roomInfo = {};

// 在服务器端区分以下三种情况：

// socket.emit() ：向建立该连接的客户端广播
// socket.broadcast.emit() ：向除去建立该连接的客户端的所有客户端广播
// io.sockets.emit() ：向所有客户端广播，等同于上面两个的和

io.on('connection', function(socket) {
    var addedUser = false;

    var url = socket.request.headers.referer;
    // console.log(url);
    // 得到roomId
    var splited = url.split('/');
    var roomID = splited[splited.length - 1]; // 获取房间ID

    console.log("房间号", roomID);


    // when the client emits 'new message', this listens and executes
    // 收到消息
    socket.on('new message', function(data) {
        // 验证如果用户不在房间内则不给发送
        console.log(roomID, roomInfo[roomID])
        if ((roomInfo[roomID] != undefined) && roomInfo[roomID].indexOf(user) === -1) {
            return false;
        }
        // we tell the client to execute 'new message'
        // socket.broadcast.emit('new message', {
        //     username: socket.username,
        //     message: data
        // });


        // 可以发送消息给多个房间 
        // socket.to('room1').to('room2').emit('hello');

        socket.to(roomID).emit('new message', {
            username: socket.username,
            message: data
        });
    });

    // 对某个人说话
    socket.on('say to someboy', function(id, msg) {
        // send a private message to the socket with the given id
        client.broadcast.to(id).emit('my message', {
            username: socket.username,
            message: msg
        });
    });
    // when the client emits 'add user', this listens and executes
    // 新用户来了
    socket.on('add user', function(username) {
        if (addedUser) return;

        // we store the username in the socket session for this client
        socket.username = username;
        ++numUsers;
        addedUser = true;
        socket.emit('login', {
            numUsers: numUsers
        });
        // echo globally (all clients) that a person has connected
        // socket.broadcast.emit('user joined', {
        //     username: socket.username,
        //     numUsers: numUsers
        // });
    });

    socket.on('join', function(username) {
        if (addedUser) return;

        // we store the username in the socket session for this client
        socket.username = username;
        ++numUsers;
        addedUser = true;
        socket.emit('login', {
            numUsers: numUsers
        });

        // 后来添加
        user = username;

        // 将用户昵称加入房间名单中
        if (!roomInfo[roomID]) {
            roomInfo[roomID] = [];
        }
        roomInfo[roomID].push(user);

        socket.join(roomID); // 加入房间
        // 通知房间内人员
        io.to(roomID).emit('user joined', {
            username: socket.username,
            numUsers: numUsers
        });
        console.log(user + '加入了' + roomID);
    });

    // when the client emits 'typing', we broadcast it to others
    // 正在输入
    socket.on('typing', function() {
        socket.broadcast.emit('typing', {
            username: socket.username
        });
    });

    // when the client emits 'stop typing', we broadcast it to others
    // 输入停止
    socket.on('stop typing', function() {
        socket.broadcast.emit('stop typing', {
            username: socket.username
        });
    });

    // when the user disconnects.. perform this
    // 断开连接
    socket.on('disconnect', function() {
        if (addedUser) {
            --numUsers;

            console.log('disconnect:', roomID);

            // 从房间名单中移除
            if (roomInfo[roomID]) {
                console.log(roomInfo[roomID])
                var index = roomInfo[roomID].indexOf(user);
                if (index !== -1) {
                    roomInfo[roomID].splice(index, 1);
                }
            }
            socket.leave(roomID); // 退出房间

            // echo globally that this client has left
            socket.to(roomID).emit('user left', {
                username: socket.username,
                numUsers: numUsers
            });
        }
    });
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}